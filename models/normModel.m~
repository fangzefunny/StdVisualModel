classdef normModel < oriSurroundModel 
    
    % The basic properties of the class
    properties 
        receptive_weight = false
    end
    
    methods
        
        % init the model
        function model = normModel(optimizer, fittime, param_bound, param_pbound)
            
            model = model@oriSurroundModel();
           
            if (nargin < 4), param_pbound = [  .1,   4;    1,   5;  -20,  20]; end
            if (nargin < 3), param_bound  = [-inf, inf; -inf, inf; -inf, inf]; end
            if (nargin < 2), fittime = 40; end
            if (nargin < 1), optimizer = 'fmincon';end
            
            param_num = 3;
            
            if size(param_bound,1) ~= param_num 
                error('Wrong Bound')
            elseif size(param_pbound, 1) ~= param_num 
                error('Wrong Possible Bound')
            end
            
            model.param_bound  = param_bound;
            model.param_pbound = param_pbound; 
            model.fittime      = fittime;
            model.optimizer    = optimizer; 
            model.num_param    = param_num ;
            model.param_name   = ['w'; 'g'; 'n'];
            model.legend       = 'oriSurround'; 
            model.model_type   = 'space';
            model.param        = [];
            model.receptive_weight = false; 
        end
                       
    end
           
    methods (Static = true)
                
       % function: f()
        function y_hat = forward(model, E, Z, param)
             y_hat = forward@oriSurroundModel(model, E, Z, param);
        end
        
        % print the parameters
        function param= print_param(model, param)
            param = print_param@oriSurroundModel(model, param);
        end
        
        % measure the goodness of 
        function R2 = metric(BOLD_pred, BOLD_tar)
            R2 = metric@oriSurroundModel(BOLD_pred, BOLD_tar);
        end
        
         % measure the goodness of 
        function loss= rmse(BOLD_pred, BOLD_tar)
            loss = rmse@oriSurroundModel(BOLD_pred, BOLD_tar);
        end
        
        % loss function with sum sqaure error: sum(y - y_hat).^2
        function mse = loss_fn(param, model, E, Z, y_tar)
            mse = loss_fn@oriSurroundModel(param, model, E, Z, y_tar);
        end
        
        % fit the data 
        function [loss, param, loss_history]  = optim(model, E, Z,  BOLD_tar, verbose)
            [loss, param, loss_history] = ...
                optim@oriSurroundModel(model, E, Z,  BOLD_tar, verbose);
        end
        
        % Predict the BOLD response: y_hat = f(x)
        function BOLD_hat = predict(model, E, Z, params, if_cross)
            
            if (nargin < 5), if_cross='cross_valid'; end
            BOLD_hat = predict@
        end
        
        % fcross valid
        function [BOLD_pred, params, R2, model] = fit(model, E, Z, BOLD_tar, verbose, cross_valid, save_info)
            
            if (nargin < 6), cross_valid = 'one'; end
            
            switch cross_valid
                
                case 'one'
                    
                    % optimize to find the best 
                    [~, param, loss_history] = model.optim(model, E, Z, BOLD_tar, verbose);
                    params = param;
                    loss_histories = loss_history;
                    model.loss_log = loss_histories;
                    % predict test data 
                    BOLD_pred = model.forward(model, E, Z, param);
                    % measure the goodness of the fit
                    R2 = model.metric(BOLD_pred, BOLD_tar);
                    % fix the parameter for the future prediction, usually
                    % not used 
                    % model  = model.fixparameters(model, param);
                    
                case 'cross_valid'
                    
                    % achieve stim vector
                    last_idx = length(size(E));
                    stim_dim = size(E, last_idx); 
                    stim_vector = save_info.start_idx:size(E, last_idx);

                    % storage, try to load the saved history, if any
                    if save_info.start_idx == 1
                        params    = nan(model.num_param, stim_dim);
                        BOLD_pred = nan(1, stim_dim);
                    else 
                        stim_vector = save_info.start_idx : size(E, last_idx);
                        load(fullfile(save_info.dir, sprintf('parameters_data-%d_roi-%d_model-%d.mat',...
                                        save_info.dataset, save_info.roi, save_info.model_idx)) , 'params');
                        load(fullfile(save_info.dir, sprintf('predictions_data-%d_roi-%d_model-%d.mat',...
                                        save_info.dataset, save_info.roi, save_info.model_idx)) , 'BOLD_pred');
                    end
                    losses    = nan(1, stim_dim);
                    loss_histories = nan(model.fittime, stim_dim);

                    % cross_valid  
                    for knock_idx = stim_vector
                        fprintf('fold %d \n', knock_idx)

                        % train vector and train data
                        keep_idx = setdiff(stim_vector, knock_idx);
                        E_train  = E(:, :, :, :, keep_idx);
                        Z_train  = Z(:, :, :, :, keep_idx);
                        tar_train = BOLD_tar(keep_idx);
                        E_test   = E(:, :, :, :, knock_idx);
                        Z_test   = Z(:, :, :, :, knock_idx);
                      
                        % fit the training data 
                        [loss, param, loss_history] = model.optim(model, E_train, Z_train, tar_train, verbose);
                        params(:, knock_idx) = param;
                        losses(knock_idx) = loss;
                        loss_histories(:, knock_idx) = loss_history;
                        
                        % predict test data 
                        BOLD_pred(knock_idx) = model.forward(model, E_test, Z_test, param);
                        
                        % save files for each cross validated fold
                        save(fullfile(save_info.dir, sprintf('parameters_data-%d_roi-%d_model-%d.mat',...
                                        save_info.dataset, save_info.roi, save_info.model_idx)) , 'params');
                        save(fullfile(save_info.dir, sprintf('predictions_data-%d_roi-%d_model-%d_fold-%d.mat',...
                                        save_info.dataset, save_info.roi, save_info.model_idx)) , 'BOLD_pred');
                    end 
                    
                    % evaluate performance of the algorithm on test data
                    R2 = model.metric(BOLD_pred, BOLD_tar);
                    
            end
        
        end            
    end
end